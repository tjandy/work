// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from msg.proto</summary>
public static partial class MsgReflection {

  #region Descriptor
  /// <summary>File descriptor for msg.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static MsgReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cgltc2cucHJvdG8iLgoMY3NfbG9naW5HYW1lEhAKCGRldmljZWlkGAEgASgJ",
          "EgwKBG5pY2sYAiABKAkiLgoMc2NfbG9naW5HYW1lEg4KBnVzZXJpZBgBIAEo",
          "BRIOCgZyZXN1bHQYAiABKAUiRgoIdXNlckluZm8SDgoGdXNlcmlkGAEgASgF",
          "EgwKBG5pY2sYAiABKAkSDgoGc3RhdHVzGAMgASgFEgwKBHRlYW0YBCABKAUi",
          "KgoOYnJfcXVldWVTdGF0dXMSGAoFdXNlcnMYASADKAsyCS51c2VySW5mbyIg",
          "ChBjc19zdGFydE1hdGNoaW5nEgwKBHR5cGUYASABKAUiIgoQc2Nfc3RhcnRN",
          "YXRjaGluZxIOCgZyZXN1bHQYASABKAUiEQoPY3NfZXhpdE1hdGNoaW5nIiEK",
          "D3NjX2V4aXRNYXRjaGluZxIOCgZyZXN1bHQYASABKAUiGgoIY3NfcmVhZHkS",
          "DgoGdXNlcmlkGAEgASgFIhoKCHNjX3JlYWR5Eg4KBnJlc3VsdBgBIAEoBSJB",
          "Cg91c2VyTG9hZGluZ0luZm8SDgoGdXNlcmlkGAEgASgFEhAKCHByb2dyZXNz",
          "GAIgASgFEgwKBHRlYW0YAyABKAUiHgoKY3NfbG9hZGluZxIQCghwcm9ncmVz",
          "cxgBIAEoBSIsCgpicl9sb2FkaW5nEh4KBGluZm8YASADKAsyEC51c2VyTG9h",
          "ZGluZ0luZm8iWQoKcGxheWVySW5mbxIOCgZ1c2VyaWQYASABKAUSEAoIYXZh",
          "dGFyaWQYAiABKAUSDwoHY2FydHlwZRgDIAEoBRIKCgJocBgEIAEoBRIMCgRu",
          "aWNrGAUgASgJIkoKCm9iamVjdEluZm8SDAoEdXVpZBgBIAEoBRIQCghvYmpl",
          "Y3RpZBgCIAEoBRIMCgR0eXBlGAMgASgFEg4KBnN0YXR1cxgEIAEoBSIvCg9i",
          "cl9PYmplY3RVcGRhdGUSHAoHb2JqaW5mbxgBIAMoCzILLm9iamVjdEluZm8i",
          "hAEKDGJyX3N0YXJ0R2FtZRIPCgdyb29tbnVtGAEgASgJEg0KBW1hcGlkGAIg",
          "ASgFEhoKBXRlYW0xGAMgAygLMgsucGxheWVySW5mbxIaCgV0ZWFtMhgEIAMo",
          "CzILLnBsYXllckluZm8SHAoHb2JqaW5mbxgFIAMoCzILLm9iamVjdEluZm8i",
          "HQoNY3NfcGlja1VwSXRlbRIMCgR1dWlkGAEgASgFIjUKE3NjX3BpY2tVcEl0",
          "bWVSZXN1bHQSDgoGcmVzdWx0GAEgASgFEg4KBml0ZW1pZBgCIAEoBSIvCg1i",
          "cl9waWNrVXBJdGVtEg4KBnVzZXJpZBgBIAEoBRIOCgZpdGVtaWQYAiABKAUi",
          "MAoKY3NfdXNlSXRlbRIQCghwb3NpdGlvbhgBIAEoBRIQCgh0b3VzZXJpZBgC",
          "IAEoBSIiChBzY191c2VJdGVtUmVzdWx0Eg4KBnJlc3VsdBgBIAEoBSJQCgpi",
          "cl91c2VJdGVtEg4KBnVzZXJpZBgBIAEoBRIQCgh0b3VzZXJpZBgCIAEoBRIO",
          "CgZpdGVtaWQYAyABKAUSEAoIZWZmZWN0aWQYBCABKAUiLQoMY3NfcGlja3Vw",
          "TnBjEg4KBnVzZXJpZBgBIAEoBRINCgVucGNpZBgCIAEoBSIkChJzY19waWNr",
          "dXBOcGNSZXN1bHQSDgoGcmVzdWx0GAEgASgFIi0KDGJyX3BpY2t1cE5wYxIO",
          "CgZ1c2VyaWQYASABKAUSDQoFbnBjaWQYAiABKAUiLQoMY3NfbnBjQXJyaXZl",
          "Eg0KBW5wY2lkGAEgASgFEg4KBnVzZXJpZBgCIAEoBSIkChJzY19ucGNBcnJp",
          "dmVSZXN1bHQSDgoGcmVzdWx0GAEgASgFIi0KDGJyX25wY0Fycml2ZRINCgVu",
          "cGNpZBgBIAEoBRIOCgZ1c2VyaWQYAiABKAUiMQoLY3NfY3Jhc2hDYXISDgoG",
          "dXNlcmlkGAEgASgFEhIKCnNlbGZkYW1hZ2UYAiABKAUiRAoRc2NfY3Jhc2hD",
          "YXJSZXN1bHQSDgoGcmVzdWx0GAEgASgFEg4KBmRhbWFnZRgCIAEoBRIPCgdu",
          "cGNoaWRlGAMgASgFIj4KC2JyX2NyYXNoQ2FyEg4KBnVzZXJpZBgBIAEoBRIO",
          "CgZkYW1hZ2UYAiABKAUSDwoHbnBjaGlkZRgDIAEoBSIeCgxicl9jYXJyZWJv",
          "cm4SDgoGdXNlcmlkGAEgASgFIi4KC21hdGhWZWN0b3IzEgkKAXgYASABKAIS",
          "CQoBeRgCIAEoAhIJCgF6GAMgASgCIpoBCgdwb3NJbmZvEg4KBnVzZXJpZBgB",
          "IAEoBRIJCgFoGAIgASgCEgkKAXYYAyABKAISEQoJaGFuZHZyYWtlGAQgASgC",
          "EhkKA3BvcxgFIAEoCzIMLm1hdGhWZWN0b3IzEhsKBWFuZ2xlGAYgASgLMgwu",
          "bWF0aFZlY3RvcjMSHgoIdmVsb2NpdHkYByABKAsyDC5tYXRoVmVjdG9yMyIk",
          "Cgpjc19zeW5jUG9zEhYKBGluZm8YASABKAsyCC5wb3NJbmZvIigKCmJyX3N5",
          "bmNQb3MSGgoIcG9zYXJyYXkYASADKAsyCC5wb3NJbmZvIisKCWNzX3JlZ2lz",
          "dBIQCghkZXZpY2VpZBgBIAEoCRIMCgRuaWNrGAIgASgJIhsKCXNjX3JlZ2lz",
          "dBIOCgZyZXN1bHQYASABKAUiDgoMY3NfbWF0Y2hJbmZvIlsKCW1hdGNoSW5m",
          "bxIQCghwbGF5ZXJpZBgBIAEoBRIWCg5ucGNBcnJpdmVDb3VudBgCIAEoBRIR",
          "CglraWxsQ291bnQYAyABKAUSEQoJZGVhZENvdW50GAQgASgFIkQKDGJyX21h",
          "dGNoSW5mbxIZCgV0ZWFtMRgBIAMoCzIKLm1hdGNoSW5mbxIZCgV0ZWFtMhgC",
          "IAMoCzIKLm1hdGNoSW5mbyJuCg5icl9tYXRjaFJlc3VsdBISCgp0ZWFtMXNj",
          "b3JlGAEgASgFEhIKCnRlYW0yc2NvcmUYAiABKAUSGQoFdGVhbTEYAyADKAsy",
          "Ci5tYXRjaEluZm8SGQoFdGVhbTIYBCADKAsyCi5tYXRjaEluZm9iBnByb3Rv",
          "Mw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::cs_loginGame), global::cs_loginGame.Parser, new[]{ "Deviceid", "Nick" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::sc_loginGame), global::sc_loginGame.Parser, new[]{ "Userid", "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::userInfo), global::userInfo.Parser, new[]{ "Userid", "Nick", "Status", "Team" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::br_queueStatus), global::br_queueStatus.Parser, new[]{ "Users" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::cs_startMatching), global::cs_startMatching.Parser, new[]{ "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::sc_startMatching), global::sc_startMatching.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::cs_exitMatching), global::cs_exitMatching.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::sc_exitMatching), global::sc_exitMatching.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::cs_ready), global::cs_ready.Parser, new[]{ "Userid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::sc_ready), global::sc_ready.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::userLoadingInfo), global::userLoadingInfo.Parser, new[]{ "Userid", "Progress", "Team" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::cs_loading), global::cs_loading.Parser, new[]{ "Progress" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::br_loading), global::br_loading.Parser, new[]{ "Info" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::playerInfo), global::playerInfo.Parser, new[]{ "Userid", "Avatarid", "Cartype", "Hp", "Nick" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::objectInfo), global::objectInfo.Parser, new[]{ "Uuid", "Objectid", "Type", "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::br_ObjectUpdate), global::br_ObjectUpdate.Parser, new[]{ "Objinfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::br_startGame), global::br_startGame.Parser, new[]{ "Roomnum", "Mapid", "Team1", "Team2", "Objinfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::cs_pickUpItem), global::cs_pickUpItem.Parser, new[]{ "Uuid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::sc_pickUpItmeResult), global::sc_pickUpItmeResult.Parser, new[]{ "Result", "Itemid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::br_pickUpItem), global::br_pickUpItem.Parser, new[]{ "Userid", "Itemid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::cs_useItem), global::cs_useItem.Parser, new[]{ "Position", "Touserid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::sc_useItemResult), global::sc_useItemResult.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::br_useItem), global::br_useItem.Parser, new[]{ "Userid", "Touserid", "Itemid", "Effectid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::cs_pickupNpc), global::cs_pickupNpc.Parser, new[]{ "Userid", "Npcid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::sc_pickupNpcResult), global::sc_pickupNpcResult.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::br_pickupNpc), global::br_pickupNpc.Parser, new[]{ "Userid", "Npcid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::cs_npcArrive), global::cs_npcArrive.Parser, new[]{ "Npcid", "Userid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::sc_npcArriveResult), global::sc_npcArriveResult.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::br_npcArrive), global::br_npcArrive.Parser, new[]{ "Npcid", "Userid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::cs_crashCar), global::cs_crashCar.Parser, new[]{ "Userid", "Selfdamage" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::sc_crashCarResult), global::sc_crashCarResult.Parser, new[]{ "Result", "Damage", "Npchide" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::br_crashCar), global::br_crashCar.Parser, new[]{ "Userid", "Damage", "Npchide" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::br_carreborn), global::br_carreborn.Parser, new[]{ "Userid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::mathVector3), global::mathVector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::posInfo), global::posInfo.Parser, new[]{ "Userid", "H", "V", "Handvrake", "Pos", "Angle", "Velocity" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::cs_syncPos), global::cs_syncPos.Parser, new[]{ "Info" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::br_syncPos), global::br_syncPos.Parser, new[]{ "Posarray" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::cs_regist), global::cs_regist.Parser, new[]{ "Deviceid", "Nick" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::sc_regist), global::sc_regist.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::cs_matchInfo), global::cs_matchInfo.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::matchInfo), global::matchInfo.Parser, new[]{ "Playerid", "NpcArriveCount", "KillCount", "DeadCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::br_matchInfo), global::br_matchInfo.Parser, new[]{ "Team1", "Team2" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::br_matchResult), global::br_matchResult.Parser, new[]{ "Team1Score", "Team2Score", "Team1", "Team2" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///登录
/// </summary>
public sealed partial class cs_loginGame : pb::IMessage<cs_loginGame> {
  private static readonly pb::MessageParser<cs_loginGame> _parser = new pb::MessageParser<cs_loginGame>(() => new cs_loginGame());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<cs_loginGame> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_loginGame() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_loginGame(cs_loginGame other) : this() {
    deviceid_ = other.deviceid_;
    nick_ = other.nick_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_loginGame Clone() {
    return new cs_loginGame(this);
  }

  /// <summary>Field number for the "deviceid" field.</summary>
  public const int DeviceidFieldNumber = 1;
  private string deviceid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Deviceid {
    get { return deviceid_; }
    set {
      deviceid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nick" field.</summary>
  public const int NickFieldNumber = 2;
  private string nick_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nick {
    get { return nick_; }
    set {
      nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as cs_loginGame);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(cs_loginGame other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Deviceid != other.Deviceid) return false;
    if (Nick != other.Nick) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Deviceid.Length != 0) hash ^= Deviceid.GetHashCode();
    if (Nick.Length != 0) hash ^= Nick.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Deviceid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Deviceid);
    }
    if (Nick.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Nick);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Deviceid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Deviceid);
    }
    if (Nick.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(cs_loginGame other) {
    if (other == null) {
      return;
    }
    if (other.Deviceid.Length != 0) {
      Deviceid = other.Deviceid;
    }
    if (other.Nick.Length != 0) {
      Nick = other.Nick;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Deviceid = input.ReadString();
          break;
        }
        case 18: {
          Nick = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class sc_loginGame : pb::IMessage<sc_loginGame> {
  private static readonly pb::MessageParser<sc_loginGame> _parser = new pb::MessageParser<sc_loginGame>(() => new sc_loginGame());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<sc_loginGame> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_loginGame() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_loginGame(sc_loginGame other) : this() {
    userid_ = other.userid_;
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_loginGame Clone() {
    return new sc_loginGame(this);
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 1;
  private int userid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 2;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as sc_loginGame);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(sc_loginGame other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Userid != other.Userid) return false;
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Userid != 0) hash ^= Userid.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Userid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Userid);
    }
    if (Result != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(sc_loginGame other) {
    if (other == null) {
      return;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Userid = input.ReadInt32();
          break;
        }
        case 16: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///房间管理
///状态更新
/// </summary>
public sealed partial class userInfo : pb::IMessage<userInfo> {
  private static readonly pb::MessageParser<userInfo> _parser = new pb::MessageParser<userInfo>(() => new userInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<userInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public userInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public userInfo(userInfo other) : this() {
    userid_ = other.userid_;
    nick_ = other.nick_;
    status_ = other.status_;
    team_ = other.team_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public userInfo Clone() {
    return new userInfo(this);
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 1;
  private int userid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  /// <summary>Field number for the "nick" field.</summary>
  public const int NickFieldNumber = 2;
  private string nick_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nick {
    get { return nick_; }
    set {
      nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 3;
  private int status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "team" field.</summary>
  public const int TeamFieldNumber = 4;
  private int team_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Team {
    get { return team_; }
    set {
      team_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as userInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(userInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Userid != other.Userid) return false;
    if (Nick != other.Nick) return false;
    if (Status != other.Status) return false;
    if (Team != other.Team) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Userid != 0) hash ^= Userid.GetHashCode();
    if (Nick.Length != 0) hash ^= Nick.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (Team != 0) hash ^= Team.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Userid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Userid);
    }
    if (Nick.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Nick);
    }
    if (Status != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Status);
    }
    if (Team != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Team);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    if (Nick.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (Team != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(userInfo other) {
    if (other == null) {
      return;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
    if (other.Nick.Length != 0) {
      Nick = other.Nick;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.Team != 0) {
      Team = other.Team;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Userid = input.ReadInt32();
          break;
        }
        case 18: {
          Nick = input.ReadString();
          break;
        }
        case 24: {
          Status = input.ReadInt32();
          break;
        }
        case 32: {
          Team = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class br_queueStatus : pb::IMessage<br_queueStatus> {
  private static readonly pb::MessageParser<br_queueStatus> _parser = new pb::MessageParser<br_queueStatus>(() => new br_queueStatus());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<br_queueStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_queueStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_queueStatus(br_queueStatus other) : this() {
    users_ = other.users_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_queueStatus Clone() {
    return new br_queueStatus(this);
  }

  /// <summary>Field number for the "users" field.</summary>
  public const int UsersFieldNumber = 1;
  private static readonly pb::FieldCodec<global::userInfo> _repeated_users_codec
      = pb::FieldCodec.ForMessage(10, global::userInfo.Parser);
  private readonly pbc::RepeatedField<global::userInfo> users_ = new pbc::RepeatedField<global::userInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::userInfo> Users {
    get { return users_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as br_queueStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(br_queueStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!users_.Equals(other.users_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= users_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    users_.WriteTo(output, _repeated_users_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += users_.CalculateSize(_repeated_users_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(br_queueStatus other) {
    if (other == null) {
      return;
    }
    users_.Add(other.users_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          users_.AddEntriesFrom(input, _repeated_users_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///开始匹配 1:2v2	2:3v3
/// </summary>
public sealed partial class cs_startMatching : pb::IMessage<cs_startMatching> {
  private static readonly pb::MessageParser<cs_startMatching> _parser = new pb::MessageParser<cs_startMatching>(() => new cs_startMatching());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<cs_startMatching> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_startMatching() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_startMatching(cs_startMatching other) : this() {
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_startMatching Clone() {
    return new cs_startMatching(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as cs_startMatching);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(cs_startMatching other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(cs_startMatching other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 0:失败 1：
/// </summary>
public sealed partial class sc_startMatching : pb::IMessage<sc_startMatching> {
  private static readonly pb::MessageParser<sc_startMatching> _parser = new pb::MessageParser<sc_startMatching>(() => new sc_startMatching());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<sc_startMatching> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_startMatching() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_startMatching(sc_startMatching other) : this() {
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_startMatching Clone() {
    return new sc_startMatching(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as sc_startMatching);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(sc_startMatching other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(sc_startMatching other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class cs_exitMatching : pb::IMessage<cs_exitMatching> {
  private static readonly pb::MessageParser<cs_exitMatching> _parser = new pb::MessageParser<cs_exitMatching>(() => new cs_exitMatching());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<cs_exitMatching> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_exitMatching() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_exitMatching(cs_exitMatching other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_exitMatching Clone() {
    return new cs_exitMatching(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as cs_exitMatching);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(cs_exitMatching other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(cs_exitMatching other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
///退出匹配
/// </summary>
public sealed partial class sc_exitMatching : pb::IMessage<sc_exitMatching> {
  private static readonly pb::MessageParser<sc_exitMatching> _parser = new pb::MessageParser<sc_exitMatching>(() => new sc_exitMatching());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<sc_exitMatching> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_exitMatching() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_exitMatching(sc_exitMatching other) : this() {
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_exitMatching Clone() {
    return new sc_exitMatching(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as sc_exitMatching);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(sc_exitMatching other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(sc_exitMatching other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///准备
/// </summary>
public sealed partial class cs_ready : pb::IMessage<cs_ready> {
  private static readonly pb::MessageParser<cs_ready> _parser = new pb::MessageParser<cs_ready>(() => new cs_ready());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<cs_ready> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_ready() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_ready(cs_ready other) : this() {
    userid_ = other.userid_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_ready Clone() {
    return new cs_ready(this);
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 1;
  private int userid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as cs_ready);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(cs_ready other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Userid != other.Userid) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Userid != 0) hash ^= Userid.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Userid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Userid);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(cs_ready other) {
    if (other == null) {
      return;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Userid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class sc_ready : pb::IMessage<sc_ready> {
  private static readonly pb::MessageParser<sc_ready> _parser = new pb::MessageParser<sc_ready>(() => new sc_ready());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<sc_ready> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_ready() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_ready(sc_ready other) : this() {
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_ready Clone() {
    return new sc_ready(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as sc_ready);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(sc_ready other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(sc_ready other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class userLoadingInfo : pb::IMessage<userLoadingInfo> {
  private static readonly pb::MessageParser<userLoadingInfo> _parser = new pb::MessageParser<userLoadingInfo>(() => new userLoadingInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<userLoadingInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public userLoadingInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public userLoadingInfo(userLoadingInfo other) : this() {
    userid_ = other.userid_;
    progress_ = other.progress_;
    team_ = other.team_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public userLoadingInfo Clone() {
    return new userLoadingInfo(this);
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 1;
  private int userid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  /// <summary>Field number for the "progress" field.</summary>
  public const int ProgressFieldNumber = 2;
  private int progress_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Progress {
    get { return progress_; }
    set {
      progress_ = value;
    }
  }

  /// <summary>Field number for the "team" field.</summary>
  public const int TeamFieldNumber = 3;
  private int team_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Team {
    get { return team_; }
    set {
      team_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as userLoadingInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(userLoadingInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Userid != other.Userid) return false;
    if (Progress != other.Progress) return false;
    if (Team != other.Team) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Userid != 0) hash ^= Userid.GetHashCode();
    if (Progress != 0) hash ^= Progress.GetHashCode();
    if (Team != 0) hash ^= Team.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Userid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Userid);
    }
    if (Progress != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Progress);
    }
    if (Team != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Team);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    if (Progress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Progress);
    }
    if (Team != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(userLoadingInfo other) {
    if (other == null) {
      return;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
    if (other.Progress != 0) {
      Progress = other.Progress;
    }
    if (other.Team != 0) {
      Team = other.Team;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Userid = input.ReadInt32();
          break;
        }
        case 16: {
          Progress = input.ReadInt32();
          break;
        }
        case 24: {
          Team = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class cs_loading : pb::IMessage<cs_loading> {
  private static readonly pb::MessageParser<cs_loading> _parser = new pb::MessageParser<cs_loading>(() => new cs_loading());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<cs_loading> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_loading() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_loading(cs_loading other) : this() {
    progress_ = other.progress_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_loading Clone() {
    return new cs_loading(this);
  }

  /// <summary>Field number for the "progress" field.</summary>
  public const int ProgressFieldNumber = 1;
  private int progress_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Progress {
    get { return progress_; }
    set {
      progress_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as cs_loading);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(cs_loading other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Progress != other.Progress) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Progress != 0) hash ^= Progress.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Progress != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Progress);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Progress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Progress);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(cs_loading other) {
    if (other == null) {
      return;
    }
    if (other.Progress != 0) {
      Progress = other.Progress;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Progress = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class br_loading : pb::IMessage<br_loading> {
  private static readonly pb::MessageParser<br_loading> _parser = new pb::MessageParser<br_loading>(() => new br_loading());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<br_loading> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_loading() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_loading(br_loading other) : this() {
    info_ = other.info_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_loading Clone() {
    return new br_loading(this);
  }

  /// <summary>Field number for the "info" field.</summary>
  public const int InfoFieldNumber = 1;
  private static readonly pb::FieldCodec<global::userLoadingInfo> _repeated_info_codec
      = pb::FieldCodec.ForMessage(10, global::userLoadingInfo.Parser);
  private readonly pbc::RepeatedField<global::userLoadingInfo> info_ = new pbc::RepeatedField<global::userLoadingInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::userLoadingInfo> Info {
    get { return info_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as br_loading);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(br_loading other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!info_.Equals(other.info_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= info_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    info_.WriteTo(output, _repeated_info_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += info_.CalculateSize(_repeated_info_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(br_loading other) {
    if (other == null) {
      return;
    }
    info_.Add(other.info_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          info_.AddEntriesFrom(input, _repeated_info_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///开始游戏
///玩家信息
/// </summary>
public sealed partial class playerInfo : pb::IMessage<playerInfo> {
  private static readonly pb::MessageParser<playerInfo> _parser = new pb::MessageParser<playerInfo>(() => new playerInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<playerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public playerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public playerInfo(playerInfo other) : this() {
    userid_ = other.userid_;
    avatarid_ = other.avatarid_;
    cartype_ = other.cartype_;
    hp_ = other.hp_;
    nick_ = other.nick_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public playerInfo Clone() {
    return new playerInfo(this);
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 1;
  private int userid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  /// <summary>Field number for the "avatarid" field.</summary>
  public const int AvataridFieldNumber = 2;
  private int avatarid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Avatarid {
    get { return avatarid_; }
    set {
      avatarid_ = value;
    }
  }

  /// <summary>Field number for the "cartype" field.</summary>
  public const int CartypeFieldNumber = 3;
  private int cartype_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Cartype {
    get { return cartype_; }
    set {
      cartype_ = value;
    }
  }

  /// <summary>Field number for the "hp" field.</summary>
  public const int HpFieldNumber = 4;
  private int hp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Hp {
    get { return hp_; }
    set {
      hp_ = value;
    }
  }

  /// <summary>Field number for the "nick" field.</summary>
  public const int NickFieldNumber = 5;
  private string nick_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nick {
    get { return nick_; }
    set {
      nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as playerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(playerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Userid != other.Userid) return false;
    if (Avatarid != other.Avatarid) return false;
    if (Cartype != other.Cartype) return false;
    if (Hp != other.Hp) return false;
    if (Nick != other.Nick) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Userid != 0) hash ^= Userid.GetHashCode();
    if (Avatarid != 0) hash ^= Avatarid.GetHashCode();
    if (Cartype != 0) hash ^= Cartype.GetHashCode();
    if (Hp != 0) hash ^= Hp.GetHashCode();
    if (Nick.Length != 0) hash ^= Nick.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Userid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Userid);
    }
    if (Avatarid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Avatarid);
    }
    if (Cartype != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Cartype);
    }
    if (Hp != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Hp);
    }
    if (Nick.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Nick);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    if (Avatarid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Avatarid);
    }
    if (Cartype != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cartype);
    }
    if (Hp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
    }
    if (Nick.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(playerInfo other) {
    if (other == null) {
      return;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
    if (other.Avatarid != 0) {
      Avatarid = other.Avatarid;
    }
    if (other.Cartype != 0) {
      Cartype = other.Cartype;
    }
    if (other.Hp != 0) {
      Hp = other.Hp;
    }
    if (other.Nick.Length != 0) {
      Nick = other.Nick;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Userid = input.ReadInt32();
          break;
        }
        case 16: {
          Avatarid = input.ReadInt32();
          break;
        }
        case 24: {
          Cartype = input.ReadInt32();
          break;
        }
        case 32: {
          Hp = input.ReadInt32();
          break;
        }
        case 42: {
          Nick = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///场景内对象更新信息
/// </summary>
public sealed partial class objectInfo : pb::IMessage<objectInfo> {
  private static readonly pb::MessageParser<objectInfo> _parser = new pb::MessageParser<objectInfo>(() => new objectInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<objectInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public objectInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public objectInfo(objectInfo other) : this() {
    uuid_ = other.uuid_;
    objectid_ = other.objectid_;
    type_ = other.type_;
    status_ = other.status_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public objectInfo Clone() {
    return new objectInfo(this);
  }

  /// <summary>Field number for the "uuid" field.</summary>
  public const int UuidFieldNumber = 1;
  private int uuid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Uuid {
    get { return uuid_; }
    set {
      uuid_ = value;
    }
  }

  /// <summary>Field number for the "objectid" field.</summary>
  public const int ObjectidFieldNumber = 2;
  private int objectid_;
  /// <summary>
  ///槽位
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Objectid {
    get { return objectid_; }
    set {
      objectid_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private int type_;
  /// <summary>
  ///1NPC 2ITEM
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 4;
  private int status_;
  /// <summary>
  /// 1 enable 2 working 3 disable
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as objectInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(objectInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Uuid != other.Uuid) return false;
    if (Objectid != other.Objectid) return false;
    if (Type != other.Type) return false;
    if (Status != other.Status) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Uuid != 0) hash ^= Uuid.GetHashCode();
    if (Objectid != 0) hash ^= Objectid.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Uuid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Uuid);
    }
    if (Objectid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Objectid);
    }
    if (Type != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Type);
    }
    if (Status != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Status);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Uuid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uuid);
    }
    if (Objectid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Objectid);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(objectInfo other) {
    if (other == null) {
      return;
    }
    if (other.Uuid != 0) {
      Uuid = other.Uuid;
    }
    if (other.Objectid != 0) {
      Objectid = other.Objectid;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Uuid = input.ReadInt32();
          break;
        }
        case 16: {
          Objectid = input.ReadInt32();
          break;
        }
        case 24: {
          Type = input.ReadInt32();
          break;
        }
        case 32: {
          Status = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class br_ObjectUpdate : pb::IMessage<br_ObjectUpdate> {
  private static readonly pb::MessageParser<br_ObjectUpdate> _parser = new pb::MessageParser<br_ObjectUpdate>(() => new br_ObjectUpdate());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<br_ObjectUpdate> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_ObjectUpdate() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_ObjectUpdate(br_ObjectUpdate other) : this() {
    objinfo_ = other.objinfo_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_ObjectUpdate Clone() {
    return new br_ObjectUpdate(this);
  }

  /// <summary>Field number for the "objinfo" field.</summary>
  public const int ObjinfoFieldNumber = 1;
  private static readonly pb::FieldCodec<global::objectInfo> _repeated_objinfo_codec
      = pb::FieldCodec.ForMessage(10, global::objectInfo.Parser);
  private readonly pbc::RepeatedField<global::objectInfo> objinfo_ = new pbc::RepeatedField<global::objectInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::objectInfo> Objinfo {
    get { return objinfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as br_ObjectUpdate);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(br_ObjectUpdate other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!objinfo_.Equals(other.objinfo_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= objinfo_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    objinfo_.WriteTo(output, _repeated_objinfo_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += objinfo_.CalculateSize(_repeated_objinfo_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(br_ObjectUpdate other) {
    if (other == null) {
      return;
    }
    objinfo_.Add(other.objinfo_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          objinfo_.AddEntriesFrom(input, _repeated_objinfo_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///游戏开始
/// </summary>
public sealed partial class br_startGame : pb::IMessage<br_startGame> {
  private static readonly pb::MessageParser<br_startGame> _parser = new pb::MessageParser<br_startGame>(() => new br_startGame());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<br_startGame> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_startGame() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_startGame(br_startGame other) : this() {
    roomnum_ = other.roomnum_;
    mapid_ = other.mapid_;
    team1_ = other.team1_.Clone();
    team2_ = other.team2_.Clone();
    objinfo_ = other.objinfo_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_startGame Clone() {
    return new br_startGame(this);
  }

  /// <summary>Field number for the "roomnum" field.</summary>
  public const int RoomnumFieldNumber = 1;
  private string roomnum_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Roomnum {
    get { return roomnum_; }
    set {
      roomnum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "mapid" field.</summary>
  public const int MapidFieldNumber = 2;
  private int mapid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Mapid {
    get { return mapid_; }
    set {
      mapid_ = value;
    }
  }

  /// <summary>Field number for the "team1" field.</summary>
  public const int Team1FieldNumber = 3;
  private static readonly pb::FieldCodec<global::playerInfo> _repeated_team1_codec
      = pb::FieldCodec.ForMessage(26, global::playerInfo.Parser);
  private readonly pbc::RepeatedField<global::playerInfo> team1_ = new pbc::RepeatedField<global::playerInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::playerInfo> Team1 {
    get { return team1_; }
  }

  /// <summary>Field number for the "team2" field.</summary>
  public const int Team2FieldNumber = 4;
  private static readonly pb::FieldCodec<global::playerInfo> _repeated_team2_codec
      = pb::FieldCodec.ForMessage(34, global::playerInfo.Parser);
  private readonly pbc::RepeatedField<global::playerInfo> team2_ = new pbc::RepeatedField<global::playerInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::playerInfo> Team2 {
    get { return team2_; }
  }

  /// <summary>Field number for the "objinfo" field.</summary>
  public const int ObjinfoFieldNumber = 5;
  private static readonly pb::FieldCodec<global::objectInfo> _repeated_objinfo_codec
      = pb::FieldCodec.ForMessage(42, global::objectInfo.Parser);
  private readonly pbc::RepeatedField<global::objectInfo> objinfo_ = new pbc::RepeatedField<global::objectInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::objectInfo> Objinfo {
    get { return objinfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as br_startGame);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(br_startGame other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Roomnum != other.Roomnum) return false;
    if (Mapid != other.Mapid) return false;
    if(!team1_.Equals(other.team1_)) return false;
    if(!team2_.Equals(other.team2_)) return false;
    if(!objinfo_.Equals(other.objinfo_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Roomnum.Length != 0) hash ^= Roomnum.GetHashCode();
    if (Mapid != 0) hash ^= Mapid.GetHashCode();
    hash ^= team1_.GetHashCode();
    hash ^= team2_.GetHashCode();
    hash ^= objinfo_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Roomnum.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Roomnum);
    }
    if (Mapid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Mapid);
    }
    team1_.WriteTo(output, _repeated_team1_codec);
    team2_.WriteTo(output, _repeated_team2_codec);
    objinfo_.WriteTo(output, _repeated_objinfo_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Roomnum.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Roomnum);
    }
    if (Mapid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mapid);
    }
    size += team1_.CalculateSize(_repeated_team1_codec);
    size += team2_.CalculateSize(_repeated_team2_codec);
    size += objinfo_.CalculateSize(_repeated_objinfo_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(br_startGame other) {
    if (other == null) {
      return;
    }
    if (other.Roomnum.Length != 0) {
      Roomnum = other.Roomnum;
    }
    if (other.Mapid != 0) {
      Mapid = other.Mapid;
    }
    team1_.Add(other.team1_);
    team2_.Add(other.team2_);
    objinfo_.Add(other.objinfo_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Roomnum = input.ReadString();
          break;
        }
        case 16: {
          Mapid = input.ReadInt32();
          break;
        }
        case 26: {
          team1_.AddEntriesFrom(input, _repeated_team1_codec);
          break;
        }
        case 34: {
          team2_.AddEntriesFrom(input, _repeated_team2_codec);
          break;
        }
        case 42: {
          objinfo_.AddEntriesFrom(input, _repeated_objinfo_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///物品拾取
/// </summary>
public sealed partial class cs_pickUpItem : pb::IMessage<cs_pickUpItem> {
  private static readonly pb::MessageParser<cs_pickUpItem> _parser = new pb::MessageParser<cs_pickUpItem>(() => new cs_pickUpItem());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<cs_pickUpItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_pickUpItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_pickUpItem(cs_pickUpItem other) : this() {
    uuid_ = other.uuid_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_pickUpItem Clone() {
    return new cs_pickUpItem(this);
  }

  /// <summary>Field number for the "uuid" field.</summary>
  public const int UuidFieldNumber = 1;
  private int uuid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Uuid {
    get { return uuid_; }
    set {
      uuid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as cs_pickUpItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(cs_pickUpItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Uuid != other.Uuid) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Uuid != 0) hash ^= Uuid.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Uuid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Uuid);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Uuid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uuid);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(cs_pickUpItem other) {
    if (other == null) {
      return;
    }
    if (other.Uuid != 0) {
      Uuid = other.Uuid;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Uuid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class sc_pickUpItmeResult : pb::IMessage<sc_pickUpItmeResult> {
  private static readonly pb::MessageParser<sc_pickUpItmeResult> _parser = new pb::MessageParser<sc_pickUpItmeResult>(() => new sc_pickUpItmeResult());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<sc_pickUpItmeResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_pickUpItmeResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_pickUpItmeResult(sc_pickUpItmeResult other) : this() {
    result_ = other.result_;
    itemid_ = other.itemid_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_pickUpItmeResult Clone() {
    return new sc_pickUpItmeResult(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "itemid" field.</summary>
  public const int ItemidFieldNumber = 2;
  private int itemid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Itemid {
    get { return itemid_; }
    set {
      itemid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as sc_pickUpItmeResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(sc_pickUpItmeResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Itemid != other.Itemid) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Itemid != 0) hash ^= Itemid.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (Itemid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Itemid);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Itemid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Itemid);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(sc_pickUpItmeResult other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Itemid != 0) {
      Itemid = other.Itemid;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          Itemid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///物品拾取广播消息
/// </summary>
public sealed partial class br_pickUpItem : pb::IMessage<br_pickUpItem> {
  private static readonly pb::MessageParser<br_pickUpItem> _parser = new pb::MessageParser<br_pickUpItem>(() => new br_pickUpItem());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<br_pickUpItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_pickUpItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_pickUpItem(br_pickUpItem other) : this() {
    userid_ = other.userid_;
    itemid_ = other.itemid_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_pickUpItem Clone() {
    return new br_pickUpItem(this);
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 1;
  private int userid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  /// <summary>Field number for the "itemid" field.</summary>
  public const int ItemidFieldNumber = 2;
  private int itemid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Itemid {
    get { return itemid_; }
    set {
      itemid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as br_pickUpItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(br_pickUpItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Userid != other.Userid) return false;
    if (Itemid != other.Itemid) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Userid != 0) hash ^= Userid.GetHashCode();
    if (Itemid != 0) hash ^= Itemid.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Userid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Userid);
    }
    if (Itemid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Itemid);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    if (Itemid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Itemid);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(br_pickUpItem other) {
    if (other == null) {
      return;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
    if (other.Itemid != 0) {
      Itemid = other.Itemid;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Userid = input.ReadInt32();
          break;
        }
        case 16: {
          Itemid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///物品使用,使用哪个位置的物品
/// </summary>
public sealed partial class cs_useItem : pb::IMessage<cs_useItem> {
  private static readonly pb::MessageParser<cs_useItem> _parser = new pb::MessageParser<cs_useItem>(() => new cs_useItem());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<cs_useItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_useItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_useItem(cs_useItem other) : this() {
    position_ = other.position_;
    touserid_ = other.touserid_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_useItem Clone() {
    return new cs_useItem(this);
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 1;
  private int position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "touserid" field.</summary>
  public const int TouseridFieldNumber = 2;
  private int touserid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Touserid {
    get { return touserid_; }
    set {
      touserid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as cs_useItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(cs_useItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Position != other.Position) return false;
    if (Touserid != other.Touserid) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Position != 0) hash ^= Position.GetHashCode();
    if (Touserid != 0) hash ^= Touserid.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Position != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Position);
    }
    if (Touserid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Touserid);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Position != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
    }
    if (Touserid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Touserid);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(cs_useItem other) {
    if (other == null) {
      return;
    }
    if (other.Position != 0) {
      Position = other.Position;
    }
    if (other.Touserid != 0) {
      Touserid = other.Touserid;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Position = input.ReadInt32();
          break;
        }
        case 16: {
          Touserid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class sc_useItemResult : pb::IMessage<sc_useItemResult> {
  private static readonly pb::MessageParser<sc_useItemResult> _parser = new pb::MessageParser<sc_useItemResult>(() => new sc_useItemResult());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<sc_useItemResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_useItemResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_useItemResult(sc_useItemResult other) : this() {
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_useItemResult Clone() {
    return new sc_useItemResult(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as sc_useItemResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(sc_useItemResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(sc_useItemResult other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///物品使用广播消息
/// </summary>
public sealed partial class br_useItem : pb::IMessage<br_useItem> {
  private static readonly pb::MessageParser<br_useItem> _parser = new pb::MessageParser<br_useItem>(() => new br_useItem());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<br_useItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_useItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_useItem(br_useItem other) : this() {
    userid_ = other.userid_;
    touserid_ = other.touserid_;
    itemid_ = other.itemid_;
    effectid_ = other.effectid_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_useItem Clone() {
    return new br_useItem(this);
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 1;
  private int userid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  /// <summary>Field number for the "touserid" field.</summary>
  public const int TouseridFieldNumber = 2;
  private int touserid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Touserid {
    get { return touserid_; }
    set {
      touserid_ = value;
    }
  }

  /// <summary>Field number for the "itemid" field.</summary>
  public const int ItemidFieldNumber = 3;
  private int itemid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Itemid {
    get { return itemid_; }
    set {
      itemid_ = value;
    }
  }

  /// <summary>Field number for the "effectid" field.</summary>
  public const int EffectidFieldNumber = 4;
  private int effectid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Effectid {
    get { return effectid_; }
    set {
      effectid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as br_useItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(br_useItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Userid != other.Userid) return false;
    if (Touserid != other.Touserid) return false;
    if (Itemid != other.Itemid) return false;
    if (Effectid != other.Effectid) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Userid != 0) hash ^= Userid.GetHashCode();
    if (Touserid != 0) hash ^= Touserid.GetHashCode();
    if (Itemid != 0) hash ^= Itemid.GetHashCode();
    if (Effectid != 0) hash ^= Effectid.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Userid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Userid);
    }
    if (Touserid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Touserid);
    }
    if (Itemid != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Itemid);
    }
    if (Effectid != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Effectid);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    if (Touserid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Touserid);
    }
    if (Itemid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Itemid);
    }
    if (Effectid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Effectid);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(br_useItem other) {
    if (other == null) {
      return;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
    if (other.Touserid != 0) {
      Touserid = other.Touserid;
    }
    if (other.Itemid != 0) {
      Itemid = other.Itemid;
    }
    if (other.Effectid != 0) {
      Effectid = other.Effectid;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Userid = input.ReadInt32();
          break;
        }
        case 16: {
          Touserid = input.ReadInt32();
          break;
        }
        case 24: {
          Itemid = input.ReadInt32();
          break;
        }
        case 32: {
          Effectid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///接
/// </summary>
public sealed partial class cs_pickupNpc : pb::IMessage<cs_pickupNpc> {
  private static readonly pb::MessageParser<cs_pickupNpc> _parser = new pb::MessageParser<cs_pickupNpc>(() => new cs_pickupNpc());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<cs_pickupNpc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_pickupNpc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_pickupNpc(cs_pickupNpc other) : this() {
    userid_ = other.userid_;
    npcid_ = other.npcid_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_pickupNpc Clone() {
    return new cs_pickupNpc(this);
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 1;
  private int userid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  /// <summary>Field number for the "npcid" field.</summary>
  public const int NpcidFieldNumber = 2;
  private int npcid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Npcid {
    get { return npcid_; }
    set {
      npcid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as cs_pickupNpc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(cs_pickupNpc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Userid != other.Userid) return false;
    if (Npcid != other.Npcid) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Userid != 0) hash ^= Userid.GetHashCode();
    if (Npcid != 0) hash ^= Npcid.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Userid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Userid);
    }
    if (Npcid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Npcid);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    if (Npcid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Npcid);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(cs_pickupNpc other) {
    if (other == null) {
      return;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
    if (other.Npcid != 0) {
      Npcid = other.Npcid;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Userid = input.ReadInt32();
          break;
        }
        case 16: {
          Npcid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class sc_pickupNpcResult : pb::IMessage<sc_pickupNpcResult> {
  private static readonly pb::MessageParser<sc_pickupNpcResult> _parser = new pb::MessageParser<sc_pickupNpcResult>(() => new sc_pickupNpcResult());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<sc_pickupNpcResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_pickupNpcResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_pickupNpcResult(sc_pickupNpcResult other) : this() {
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_pickupNpcResult Clone() {
    return new sc_pickupNpcResult(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as sc_pickupNpcResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(sc_pickupNpcResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(sc_pickupNpcResult other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class br_pickupNpc : pb::IMessage<br_pickupNpc> {
  private static readonly pb::MessageParser<br_pickupNpc> _parser = new pb::MessageParser<br_pickupNpc>(() => new br_pickupNpc());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<br_pickupNpc> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_pickupNpc() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_pickupNpc(br_pickupNpc other) : this() {
    userid_ = other.userid_;
    npcid_ = other.npcid_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_pickupNpc Clone() {
    return new br_pickupNpc(this);
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 1;
  private int userid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  /// <summary>Field number for the "npcid" field.</summary>
  public const int NpcidFieldNumber = 2;
  private int npcid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Npcid {
    get { return npcid_; }
    set {
      npcid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as br_pickupNpc);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(br_pickupNpc other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Userid != other.Userid) return false;
    if (Npcid != other.Npcid) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Userid != 0) hash ^= Userid.GetHashCode();
    if (Npcid != 0) hash ^= Npcid.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Userid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Userid);
    }
    if (Npcid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Npcid);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    if (Npcid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Npcid);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(br_pickupNpc other) {
    if (other == null) {
      return;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
    if (other.Npcid != 0) {
      Npcid = other.Npcid;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Userid = input.ReadInt32();
          break;
        }
        case 16: {
          Npcid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///送
/// </summary>
public sealed partial class cs_npcArrive : pb::IMessage<cs_npcArrive> {
  private static readonly pb::MessageParser<cs_npcArrive> _parser = new pb::MessageParser<cs_npcArrive>(() => new cs_npcArrive());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<cs_npcArrive> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_npcArrive() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_npcArrive(cs_npcArrive other) : this() {
    npcid_ = other.npcid_;
    userid_ = other.userid_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_npcArrive Clone() {
    return new cs_npcArrive(this);
  }

  /// <summary>Field number for the "npcid" field.</summary>
  public const int NpcidFieldNumber = 1;
  private int npcid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Npcid {
    get { return npcid_; }
    set {
      npcid_ = value;
    }
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 2;
  private int userid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as cs_npcArrive);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(cs_npcArrive other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Npcid != other.Npcid) return false;
    if (Userid != other.Userid) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Npcid != 0) hash ^= Npcid.GetHashCode();
    if (Userid != 0) hash ^= Userid.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Npcid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Npcid);
    }
    if (Userid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Userid);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Npcid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Npcid);
    }
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(cs_npcArrive other) {
    if (other == null) {
      return;
    }
    if (other.Npcid != 0) {
      Npcid = other.Npcid;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Npcid = input.ReadInt32();
          break;
        }
        case 16: {
          Userid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class sc_npcArriveResult : pb::IMessage<sc_npcArriveResult> {
  private static readonly pb::MessageParser<sc_npcArriveResult> _parser = new pb::MessageParser<sc_npcArriveResult>(() => new sc_npcArriveResult());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<sc_npcArriveResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_npcArriveResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_npcArriveResult(sc_npcArriveResult other) : this() {
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_npcArriveResult Clone() {
    return new sc_npcArriveResult(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as sc_npcArriveResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(sc_npcArriveResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(sc_npcArriveResult other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class br_npcArrive : pb::IMessage<br_npcArrive> {
  private static readonly pb::MessageParser<br_npcArrive> _parser = new pb::MessageParser<br_npcArrive>(() => new br_npcArrive());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<br_npcArrive> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_npcArrive() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_npcArrive(br_npcArrive other) : this() {
    npcid_ = other.npcid_;
    userid_ = other.userid_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_npcArrive Clone() {
    return new br_npcArrive(this);
  }

  /// <summary>Field number for the "npcid" field.</summary>
  public const int NpcidFieldNumber = 1;
  private int npcid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Npcid {
    get { return npcid_; }
    set {
      npcid_ = value;
    }
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 2;
  private int userid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as br_npcArrive);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(br_npcArrive other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Npcid != other.Npcid) return false;
    if (Userid != other.Userid) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Npcid != 0) hash ^= Npcid.GetHashCode();
    if (Userid != 0) hash ^= Userid.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Npcid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Npcid);
    }
    if (Userid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Userid);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Npcid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Npcid);
    }
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(br_npcArrive other) {
    if (other == null) {
      return;
    }
    if (other.Npcid != 0) {
      Npcid = other.Npcid;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Npcid = input.ReadInt32();
          break;
        }
        case 16: {
          Userid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///撞车
/// </summary>
public sealed partial class cs_crashCar : pb::IMessage<cs_crashCar> {
  private static readonly pb::MessageParser<cs_crashCar> _parser = new pb::MessageParser<cs_crashCar>(() => new cs_crashCar());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<cs_crashCar> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_crashCar() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_crashCar(cs_crashCar other) : this() {
    userid_ = other.userid_;
    selfdamage_ = other.selfdamage_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_crashCar Clone() {
    return new cs_crashCar(this);
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 1;
  private int userid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  /// <summary>Field number for the "selfdamage" field.</summary>
  public const int SelfdamageFieldNumber = 2;
  private int selfdamage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Selfdamage {
    get { return selfdamage_; }
    set {
      selfdamage_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as cs_crashCar);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(cs_crashCar other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Userid != other.Userid) return false;
    if (Selfdamage != other.Selfdamage) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Userid != 0) hash ^= Userid.GetHashCode();
    if (Selfdamage != 0) hash ^= Selfdamage.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Userid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Userid);
    }
    if (Selfdamage != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Selfdamage);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    if (Selfdamage != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Selfdamage);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(cs_crashCar other) {
    if (other == null) {
      return;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
    if (other.Selfdamage != 0) {
      Selfdamage = other.Selfdamage;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Userid = input.ReadInt32();
          break;
        }
        case 16: {
          Selfdamage = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class sc_crashCarResult : pb::IMessage<sc_crashCarResult> {
  private static readonly pb::MessageParser<sc_crashCarResult> _parser = new pb::MessageParser<sc_crashCarResult>(() => new sc_crashCarResult());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<sc_crashCarResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_crashCarResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_crashCarResult(sc_crashCarResult other) : this() {
    result_ = other.result_;
    damage_ = other.damage_;
    npchide_ = other.npchide_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_crashCarResult Clone() {
    return new sc_crashCarResult(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "damage" field.</summary>
  public const int DamageFieldNumber = 2;
  private int damage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Damage {
    get { return damage_; }
    set {
      damage_ = value;
    }
  }

  /// <summary>Field number for the "npchide" field.</summary>
  public const int NpchideFieldNumber = 3;
  private int npchide_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Npchide {
    get { return npchide_; }
    set {
      npchide_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as sc_crashCarResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(sc_crashCarResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Damage != other.Damage) return false;
    if (Npchide != other.Npchide) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Damage != 0) hash ^= Damage.GetHashCode();
    if (Npchide != 0) hash ^= Npchide.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (Damage != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Damage);
    }
    if (Npchide != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Npchide);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Damage != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
    }
    if (Npchide != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Npchide);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(sc_crashCarResult other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Damage != 0) {
      Damage = other.Damage;
    }
    if (other.Npchide != 0) {
      Npchide = other.Npchide;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          Damage = input.ReadInt32();
          break;
        }
        case 24: {
          Npchide = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///撞车伤害广播
/// </summary>
public sealed partial class br_crashCar : pb::IMessage<br_crashCar> {
  private static readonly pb::MessageParser<br_crashCar> _parser = new pb::MessageParser<br_crashCar>(() => new br_crashCar());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<br_crashCar> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_crashCar() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_crashCar(br_crashCar other) : this() {
    userid_ = other.userid_;
    damage_ = other.damage_;
    npchide_ = other.npchide_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_crashCar Clone() {
    return new br_crashCar(this);
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 1;
  private int userid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  /// <summary>Field number for the "damage" field.</summary>
  public const int DamageFieldNumber = 2;
  private int damage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Damage {
    get { return damage_; }
    set {
      damage_ = value;
    }
  }

  /// <summary>Field number for the "npchide" field.</summary>
  public const int NpchideFieldNumber = 3;
  private int npchide_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Npchide {
    get { return npchide_; }
    set {
      npchide_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as br_crashCar);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(br_crashCar other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Userid != other.Userid) return false;
    if (Damage != other.Damage) return false;
    if (Npchide != other.Npchide) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Userid != 0) hash ^= Userid.GetHashCode();
    if (Damage != 0) hash ^= Damage.GetHashCode();
    if (Npchide != 0) hash ^= Npchide.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Userid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Userid);
    }
    if (Damage != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Damage);
    }
    if (Npchide != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Npchide);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    if (Damage != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
    }
    if (Npchide != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Npchide);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(br_crashCar other) {
    if (other == null) {
      return;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
    if (other.Damage != 0) {
      Damage = other.Damage;
    }
    if (other.Npchide != 0) {
      Npchide = other.Npchide;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Userid = input.ReadInt32();
          break;
        }
        case 16: {
          Damage = input.ReadInt32();
          break;
        }
        case 24: {
          Npchide = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///车重生消息
/// </summary>
public sealed partial class br_carreborn : pb::IMessage<br_carreborn> {
  private static readonly pb::MessageParser<br_carreborn> _parser = new pb::MessageParser<br_carreborn>(() => new br_carreborn());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<br_carreborn> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_carreborn() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_carreborn(br_carreborn other) : this() {
    userid_ = other.userid_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_carreborn Clone() {
    return new br_carreborn(this);
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 1;
  private int userid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as br_carreborn);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(br_carreborn other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Userid != other.Userid) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Userid != 0) hash ^= Userid.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Userid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Userid);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(br_carreborn other) {
    if (other == null) {
      return;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Userid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///房间内位置同步
///Vector3
/// </summary>
public sealed partial class mathVector3 : pb::IMessage<mathVector3> {
  private static readonly pb::MessageParser<mathVector3> _parser = new pb::MessageParser<mathVector3>(() => new mathVector3());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<mathVector3> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public mathVector3() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public mathVector3(mathVector3 other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public mathVector3 Clone() {
    return new mathVector3(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private float z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as mathVector3);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(mathVector3 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (X != other.X) return false;
    if (Y != other.Y) return false;
    if (Z != other.Z) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= X.GetHashCode();
    if (Y != 0F) hash ^= Y.GetHashCode();
    if (Z != 0F) hash ^= Z.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (Z != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Z);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(mathVector3 other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
        case 29: {
          Z = input.ReadFloat();
          break;
        }
      }
    }
  }

}

/// <summary>
///车辆位置同步信息
/// </summary>
public sealed partial class posInfo : pb::IMessage<posInfo> {
  private static readonly pb::MessageParser<posInfo> _parser = new pb::MessageParser<posInfo>(() => new posInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<posInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public posInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public posInfo(posInfo other) : this() {
    userid_ = other.userid_;
    h_ = other.h_;
    v_ = other.v_;
    handvrake_ = other.handvrake_;
    Pos = other.pos_ != null ? other.Pos.Clone() : null;
    Angle = other.angle_ != null ? other.Angle.Clone() : null;
    Velocity = other.velocity_ != null ? other.Velocity.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public posInfo Clone() {
    return new posInfo(this);
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 1;
  private int userid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  /// <summary>Field number for the "h" field.</summary>
  public const int HFieldNumber = 2;
  private float h_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float H {
    get { return h_; }
    set {
      h_ = value;
    }
  }

  /// <summary>Field number for the "v" field.</summary>
  public const int VFieldNumber = 3;
  private float v_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float V {
    get { return v_; }
    set {
      v_ = value;
    }
  }

  /// <summary>Field number for the "handvrake" field.</summary>
  public const int HandvrakeFieldNumber = 4;
  private float handvrake_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Handvrake {
    get { return handvrake_; }
    set {
      handvrake_ = value;
    }
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 5;
  private global::mathVector3 pos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::mathVector3 Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  /// <summary>Field number for the "angle" field.</summary>
  public const int AngleFieldNumber = 6;
  private global::mathVector3 angle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::mathVector3 Angle {
    get { return angle_; }
    set {
      angle_ = value;
    }
  }

  /// <summary>Field number for the "velocity" field.</summary>
  public const int VelocityFieldNumber = 7;
  private global::mathVector3 velocity_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::mathVector3 Velocity {
    get { return velocity_; }
    set {
      velocity_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as posInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(posInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Userid != other.Userid) return false;
    if (H != other.H) return false;
    if (V != other.V) return false;
    if (Handvrake != other.Handvrake) return false;
    if (!object.Equals(Pos, other.Pos)) return false;
    if (!object.Equals(Angle, other.Angle)) return false;
    if (!object.Equals(Velocity, other.Velocity)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Userid != 0) hash ^= Userid.GetHashCode();
    if (H != 0F) hash ^= H.GetHashCode();
    if (V != 0F) hash ^= V.GetHashCode();
    if (Handvrake != 0F) hash ^= Handvrake.GetHashCode();
    if (pos_ != null) hash ^= Pos.GetHashCode();
    if (angle_ != null) hash ^= Angle.GetHashCode();
    if (velocity_ != null) hash ^= Velocity.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Userid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Userid);
    }
    if (H != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(H);
    }
    if (V != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(V);
    }
    if (Handvrake != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(Handvrake);
    }
    if (pos_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Pos);
    }
    if (angle_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Angle);
    }
    if (velocity_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(Velocity);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    if (H != 0F) {
      size += 1 + 4;
    }
    if (V != 0F) {
      size += 1 + 4;
    }
    if (Handvrake != 0F) {
      size += 1 + 4;
    }
    if (pos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
    }
    if (angle_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Angle);
    }
    if (velocity_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(posInfo other) {
    if (other == null) {
      return;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
    if (other.H != 0F) {
      H = other.H;
    }
    if (other.V != 0F) {
      V = other.V;
    }
    if (other.Handvrake != 0F) {
      Handvrake = other.Handvrake;
    }
    if (other.pos_ != null) {
      if (pos_ == null) {
        pos_ = new global::mathVector3();
      }
      Pos.MergeFrom(other.Pos);
    }
    if (other.angle_ != null) {
      if (angle_ == null) {
        angle_ = new global::mathVector3();
      }
      Angle.MergeFrom(other.Angle);
    }
    if (other.velocity_ != null) {
      if (velocity_ == null) {
        velocity_ = new global::mathVector3();
      }
      Velocity.MergeFrom(other.Velocity);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Userid = input.ReadInt32();
          break;
        }
        case 21: {
          H = input.ReadFloat();
          break;
        }
        case 29: {
          V = input.ReadFloat();
          break;
        }
        case 37: {
          Handvrake = input.ReadFloat();
          break;
        }
        case 42: {
          if (pos_ == null) {
            pos_ = new global::mathVector3();
          }
          input.ReadMessage(pos_);
          break;
        }
        case 50: {
          if (angle_ == null) {
            angle_ = new global::mathVector3();
          }
          input.ReadMessage(angle_);
          break;
        }
        case 58: {
          if (velocity_ == null) {
            velocity_ = new global::mathVector3();
          }
          input.ReadMessage(velocity_);
          break;
        }
      }
    }
  }

}

public sealed partial class cs_syncPos : pb::IMessage<cs_syncPos> {
  private static readonly pb::MessageParser<cs_syncPos> _parser = new pb::MessageParser<cs_syncPos>(() => new cs_syncPos());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<cs_syncPos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_syncPos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_syncPos(cs_syncPos other) : this() {
    Info = other.info_ != null ? other.Info.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_syncPos Clone() {
    return new cs_syncPos(this);
  }

  /// <summary>Field number for the "info" field.</summary>
  public const int InfoFieldNumber = 1;
  private global::posInfo info_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::posInfo Info {
    get { return info_; }
    set {
      info_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as cs_syncPos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(cs_syncPos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Info, other.Info)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (info_ != null) hash ^= Info.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (info_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Info);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (info_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(cs_syncPos other) {
    if (other == null) {
      return;
    }
    if (other.info_ != null) {
      if (info_ == null) {
        info_ = new global::posInfo();
      }
      Info.MergeFrom(other.Info);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (info_ == null) {
            info_ = new global::posInfo();
          }
          input.ReadMessage(info_);
          break;
        }
      }
    }
  }

}

/// <summary>
///不需要包含当前人
/// </summary>
public sealed partial class br_syncPos : pb::IMessage<br_syncPos> {
  private static readonly pb::MessageParser<br_syncPos> _parser = new pb::MessageParser<br_syncPos>(() => new br_syncPos());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<br_syncPos> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_syncPos() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_syncPos(br_syncPos other) : this() {
    posarray_ = other.posarray_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_syncPos Clone() {
    return new br_syncPos(this);
  }

  /// <summary>Field number for the "posarray" field.</summary>
  public const int PosarrayFieldNumber = 1;
  private static readonly pb::FieldCodec<global::posInfo> _repeated_posarray_codec
      = pb::FieldCodec.ForMessage(10, global::posInfo.Parser);
  private readonly pbc::RepeatedField<global::posInfo> posarray_ = new pbc::RepeatedField<global::posInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::posInfo> Posarray {
    get { return posarray_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as br_syncPos);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(br_syncPos other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!posarray_.Equals(other.posarray_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= posarray_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    posarray_.WriteTo(output, _repeated_posarray_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += posarray_.CalculateSize(_repeated_posarray_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(br_syncPos other) {
    if (other == null) {
      return;
    }
    posarray_.Add(other.posarray_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          posarray_.AddEntriesFrom(input, _repeated_posarray_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class cs_regist : pb::IMessage<cs_regist> {
  private static readonly pb::MessageParser<cs_regist> _parser = new pb::MessageParser<cs_regist>(() => new cs_regist());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<cs_regist> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_regist() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_regist(cs_regist other) : this() {
    deviceid_ = other.deviceid_;
    nick_ = other.nick_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_regist Clone() {
    return new cs_regist(this);
  }

  /// <summary>Field number for the "deviceid" field.</summary>
  public const int DeviceidFieldNumber = 1;
  private string deviceid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Deviceid {
    get { return deviceid_; }
    set {
      deviceid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nick" field.</summary>
  public const int NickFieldNumber = 2;
  private string nick_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nick {
    get { return nick_; }
    set {
      nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as cs_regist);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(cs_regist other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Deviceid != other.Deviceid) return false;
    if (Nick != other.Nick) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Deviceid.Length != 0) hash ^= Deviceid.GetHashCode();
    if (Nick.Length != 0) hash ^= Nick.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Deviceid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Deviceid);
    }
    if (Nick.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Nick);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Deviceid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Deviceid);
    }
    if (Nick.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(cs_regist other) {
    if (other == null) {
      return;
    }
    if (other.Deviceid.Length != 0) {
      Deviceid = other.Deviceid;
    }
    if (other.Nick.Length != 0) {
      Nick = other.Nick;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Deviceid = input.ReadString();
          break;
        }
        case 18: {
          Nick = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class sc_regist : pb::IMessage<sc_regist> {
  private static readonly pb::MessageParser<sc_regist> _parser = new pb::MessageParser<sc_regist>(() => new sc_regist());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<sc_regist> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_regist() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_regist(sc_regist other) : this() {
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sc_regist Clone() {
    return new sc_regist(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as sc_regist);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(sc_regist other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(sc_regist other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///获得比赛记录,接人数，摧毁车辆数，被摧毁数
/// </summary>
public sealed partial class cs_matchInfo : pb::IMessage<cs_matchInfo> {
  private static readonly pb::MessageParser<cs_matchInfo> _parser = new pb::MessageParser<cs_matchInfo>(() => new cs_matchInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<cs_matchInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[39]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_matchInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_matchInfo(cs_matchInfo other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public cs_matchInfo Clone() {
    return new cs_matchInfo(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as cs_matchInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(cs_matchInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(cs_matchInfo other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class matchInfo : pb::IMessage<matchInfo> {
  private static readonly pb::MessageParser<matchInfo> _parser = new pb::MessageParser<matchInfo>(() => new matchInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<matchInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[40]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public matchInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public matchInfo(matchInfo other) : this() {
    playerid_ = other.playerid_;
    npcArriveCount_ = other.npcArriveCount_;
    killCount_ = other.killCount_;
    deadCount_ = other.deadCount_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public matchInfo Clone() {
    return new matchInfo(this);
  }

  /// <summary>Field number for the "playerid" field.</summary>
  public const int PlayeridFieldNumber = 1;
  private int playerid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Playerid {
    get { return playerid_; }
    set {
      playerid_ = value;
    }
  }

  /// <summary>Field number for the "npcArriveCount" field.</summary>
  public const int NpcArriveCountFieldNumber = 2;
  private int npcArriveCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NpcArriveCount {
    get { return npcArriveCount_; }
    set {
      npcArriveCount_ = value;
    }
  }

  /// <summary>Field number for the "killCount" field.</summary>
  public const int KillCountFieldNumber = 3;
  private int killCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int KillCount {
    get { return killCount_; }
    set {
      killCount_ = value;
    }
  }

  /// <summary>Field number for the "deadCount" field.</summary>
  public const int DeadCountFieldNumber = 4;
  private int deadCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DeadCount {
    get { return deadCount_; }
    set {
      deadCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as matchInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(matchInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Playerid != other.Playerid) return false;
    if (NpcArriveCount != other.NpcArriveCount) return false;
    if (KillCount != other.KillCount) return false;
    if (DeadCount != other.DeadCount) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Playerid != 0) hash ^= Playerid.GetHashCode();
    if (NpcArriveCount != 0) hash ^= NpcArriveCount.GetHashCode();
    if (KillCount != 0) hash ^= KillCount.GetHashCode();
    if (DeadCount != 0) hash ^= DeadCount.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Playerid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Playerid);
    }
    if (NpcArriveCount != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(NpcArriveCount);
    }
    if (KillCount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(KillCount);
    }
    if (DeadCount != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(DeadCount);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Playerid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Playerid);
    }
    if (NpcArriveCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NpcArriveCount);
    }
    if (KillCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(KillCount);
    }
    if (DeadCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeadCount);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(matchInfo other) {
    if (other == null) {
      return;
    }
    if (other.Playerid != 0) {
      Playerid = other.Playerid;
    }
    if (other.NpcArriveCount != 0) {
      NpcArriveCount = other.NpcArriveCount;
    }
    if (other.KillCount != 0) {
      KillCount = other.KillCount;
    }
    if (other.DeadCount != 0) {
      DeadCount = other.DeadCount;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Playerid = input.ReadInt32();
          break;
        }
        case 16: {
          NpcArriveCount = input.ReadInt32();
          break;
        }
        case 24: {
          KillCount = input.ReadInt32();
          break;
        }
        case 32: {
          DeadCount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class br_matchInfo : pb::IMessage<br_matchInfo> {
  private static readonly pb::MessageParser<br_matchInfo> _parser = new pb::MessageParser<br_matchInfo>(() => new br_matchInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<br_matchInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[41]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_matchInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_matchInfo(br_matchInfo other) : this() {
    team1_ = other.team1_.Clone();
    team2_ = other.team2_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_matchInfo Clone() {
    return new br_matchInfo(this);
  }

  /// <summary>Field number for the "team1" field.</summary>
  public const int Team1FieldNumber = 1;
  private static readonly pb::FieldCodec<global::matchInfo> _repeated_team1_codec
      = pb::FieldCodec.ForMessage(10, global::matchInfo.Parser);
  private readonly pbc::RepeatedField<global::matchInfo> team1_ = new pbc::RepeatedField<global::matchInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::matchInfo> Team1 {
    get { return team1_; }
  }

  /// <summary>Field number for the "team2" field.</summary>
  public const int Team2FieldNumber = 2;
  private static readonly pb::FieldCodec<global::matchInfo> _repeated_team2_codec
      = pb::FieldCodec.ForMessage(18, global::matchInfo.Parser);
  private readonly pbc::RepeatedField<global::matchInfo> team2_ = new pbc::RepeatedField<global::matchInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::matchInfo> Team2 {
    get { return team2_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as br_matchInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(br_matchInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!team1_.Equals(other.team1_)) return false;
    if(!team2_.Equals(other.team2_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= team1_.GetHashCode();
    hash ^= team2_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    team1_.WriteTo(output, _repeated_team1_codec);
    team2_.WriteTo(output, _repeated_team2_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += team1_.CalculateSize(_repeated_team1_codec);
    size += team2_.CalculateSize(_repeated_team2_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(br_matchInfo other) {
    if (other == null) {
      return;
    }
    team1_.Add(other.team1_);
    team2_.Add(other.team2_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          team1_.AddEntriesFrom(input, _repeated_team1_codec);
          break;
        }
        case 18: {
          team2_.AddEntriesFrom(input, _repeated_team2_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///比赛结束
/// </summary>
public sealed partial class br_matchResult : pb::IMessage<br_matchResult> {
  private static readonly pb::MessageParser<br_matchResult> _parser = new pb::MessageParser<br_matchResult>(() => new br_matchResult());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<br_matchResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[42]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_matchResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_matchResult(br_matchResult other) : this() {
    team1Score_ = other.team1Score_;
    team2Score_ = other.team2Score_;
    team1_ = other.team1_.Clone();
    team2_ = other.team2_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public br_matchResult Clone() {
    return new br_matchResult(this);
  }

  /// <summary>Field number for the "team1score" field.</summary>
  public const int Team1ScoreFieldNumber = 1;
  private int team1Score_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Team1Score {
    get { return team1Score_; }
    set {
      team1Score_ = value;
    }
  }

  /// <summary>Field number for the "team2score" field.</summary>
  public const int Team2ScoreFieldNumber = 2;
  private int team2Score_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Team2Score {
    get { return team2Score_; }
    set {
      team2Score_ = value;
    }
  }

  /// <summary>Field number for the "team1" field.</summary>
  public const int Team1FieldNumber = 3;
  private static readonly pb::FieldCodec<global::matchInfo> _repeated_team1_codec
      = pb::FieldCodec.ForMessage(26, global::matchInfo.Parser);
  private readonly pbc::RepeatedField<global::matchInfo> team1_ = new pbc::RepeatedField<global::matchInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::matchInfo> Team1 {
    get { return team1_; }
  }

  /// <summary>Field number for the "team2" field.</summary>
  public const int Team2FieldNumber = 4;
  private static readonly pb::FieldCodec<global::matchInfo> _repeated_team2_codec
      = pb::FieldCodec.ForMessage(34, global::matchInfo.Parser);
  private readonly pbc::RepeatedField<global::matchInfo> team2_ = new pbc::RepeatedField<global::matchInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::matchInfo> Team2 {
    get { return team2_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as br_matchResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(br_matchResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Team1Score != other.Team1Score) return false;
    if (Team2Score != other.Team2Score) return false;
    if(!team1_.Equals(other.team1_)) return false;
    if(!team2_.Equals(other.team2_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Team1Score != 0) hash ^= Team1Score.GetHashCode();
    if (Team2Score != 0) hash ^= Team2Score.GetHashCode();
    hash ^= team1_.GetHashCode();
    hash ^= team2_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Team1Score != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Team1Score);
    }
    if (Team2Score != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Team2Score);
    }
    team1_.WriteTo(output, _repeated_team1_codec);
    team2_.WriteTo(output, _repeated_team2_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Team1Score != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team1Score);
    }
    if (Team2Score != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team2Score);
    }
    size += team1_.CalculateSize(_repeated_team1_codec);
    size += team2_.CalculateSize(_repeated_team2_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(br_matchResult other) {
    if (other == null) {
      return;
    }
    if (other.Team1Score != 0) {
      Team1Score = other.Team1Score;
    }
    if (other.Team2Score != 0) {
      Team2Score = other.Team2Score;
    }
    team1_.Add(other.team1_);
    team2_.Add(other.team2_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Team1Score = input.ReadInt32();
          break;
        }
        case 16: {
          Team2Score = input.ReadInt32();
          break;
        }
        case 26: {
          team1_.AddEntriesFrom(input, _repeated_team1_codec);
          break;
        }
        case 34: {
          team2_.AddEntriesFrom(input, _repeated_team2_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
